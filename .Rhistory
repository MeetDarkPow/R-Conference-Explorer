sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
quesId <- Ques_df$ID
i <- 1
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
View(cmt_df)
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(quesId)
# Obtaining Question IDs from `Query_df` function
questionId <- Ques_df$ID
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(questionId)
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(questionId)
rm(list = ls())
key <- "SX945TWflISfN*DzZ*G53w(("
token <- "ixiOsNGGzzlmAyggyT1rRA))"
library(httr)
library(rlist)
library(jsonlite)
library(dplyr)
library(lubridate)
Ques_query <- function(fromDate, toDate, pg=1){
fromDate <- as.numeric(as.POSIXct(fromDate, tz="UTC"))
toDate <- as.numeric(as.POSIXct(toDate, tz="UTC"))
ques_df <- data.frame(ID=integer(), Title=character(), View_Count=integer(),
Answer=logical(), Link=character())
repeat{
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
if(length(wbpg_items)==0){
break
}
len <- as.vector(1:length(wbpg_items))
quesId <- lapply(len, function(x){wbpg_items[[x]][["question_id"]]})
quesTitle <- lapply(len, function(x){wbpg_items[[x]][["title"]]})
quesViewCount <- lapply(len, function(x){wbpg_items[[x]][["view_count"]]})
quesAnswered <- lapply(len, function(x){wbpg_items[[x]][["is_answered"]]})
quesLink <- lapply(len, function(x){wbpg_items[[x]][["link"]]})
df <- data.frame(ID=unlist(quesId), Title=unlist(quesTitle), View_Count=unlist(quesViewCount),
Answer=unlist(quesAnswered), Link=unlist(quesLink))
ques_df <- rbind(ques_df, df)
pg <- pg + 1
}
ques_df
}
# Obtaining list of Question IDs whose Answer is PRESENT on Stack Overflow
Ques_df <- Ques_query("2021-01-01", "2021-01-02")
temp_ques_df <- filter(Ques_df, Answer==TRUE)
questionId <- temp_ques_df$ID
Ans_query <- function(quesId){
ans_df <- data.frame(QuestionID=integer(), AnswerID=integer(),
CreationDate=POSIXct(), Score=integer(), Accepted=logical())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/answers?key=", key, "&pagesize=100&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
qId <- lapply(len, function(x){wbpg_items[[x]][["question_id"]]})
aId <- lapply(len, function(x){wbpg_items[[x]][["answer_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
isAcc <- lapply(len, function(x){wbpg_items[[x]][["is_accepted"]]})
df <- data.frame(QuestionID=unlist(qId), AnswerID=unlist(aId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc), Accepted=unlist(isAcc))
ans_df <- rbind(ans_df, df)
i <- i+1
}
ans_df
}
asdm <- Ans_query(questionId)
# Obtaining Question IDs from `Query_df` function
questionId <- Ques_df$ID
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
meet <- Comnt_query(questionId)
View(meet)
rm(list = ls())
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "dbplyr", "desc", "dplyr", "farver", "fastmap", "forcats", "gert", "ggforce", "ggraph", "htmltools", "isoband", "ISOcodes", "knitr", "lifecycle", "lubridate", "MatrixModels", "matrixStats", "memoise", "mime", "packageRank", "pillar", "pkgload", "promises", "ps", "quantreg", "rappdirs", "RcppArmadillo", "RCurl", "reprex", "rgl", "rmarkdown", "rvest", "shiny", "shinythemes", "SparseM", "stopwords", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "usethis", "utf8", "waldo", "withr", "xfun"))
# storing API keys
api_key <- "Vasln0HaAY8pkXu7J2xQkBX8c"
api_secret_key <- "h5ra23jvrY8nq7vkUBld1mXXYwjsKR5iyNoH2CATUNKO1rdzq3"
acc_token <- "1013338789580713984-2oRZj3Btzvgl0yZqJ8Wfr0GEmTzW34"
acc_secret <- "92oQXpMxvdNI7gwIAji2ZfEdN905eGudFoeNWd4sb6Wnn"
library(rtweet)
token <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = acc_token,
access_secret = acc_secret
)
get_followers(user = "@sachin_rt")
get_followers(user = "sachin_rt")
get_followers(user = "@sachin_rt", n=100)
df <- get_followers(user = "@sachin_rt", n=100)
View(df)
usrs <- lookup_users(df$user_id)
View(usrs)
user_names <- usrs$screen_name
user_names
library(rtweet)
# searching for required #rstats tweets
rtweet_data <- search_tweets(q="#rstats", since = Sys.Date()-1,
until = Sys.Date(),
retryonratelimit = TRUE, include_rts = FALSE)
View(rtweet_data)
rm(list = ls())
setwd("~/GitHub/R-Conference-Explorer")
library(flexdashboard)
library(dplyr)
library(crosstalk)
library(DT)
library(leaflet)
event_data <- readRDS("R_Events.rds")
sd <- SharedData$new(event_data)
View(event_data)
sch <- readRDS("data/gias_sample.RDS")
event_data <- bind_rows(data, .id = "column_label")
event_data <- bind_rows(event_data, .id = "column_label")
sd <- SharedData$new(event_data)
View(event_data)
total_events <- length(unique(event_data$id))
sum(event_data$yes_rsvp_count)
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
library(flexdashboard)
library(dplyr)
library(crosstalk)
library(DT)
library(leaflet)
event_data <- readRDS("R_Events.rds")
event_data <- bind_rows(event_data, .id = "column_label")
sd <- SharedData$new(event_data)
total_events <- length(unique(event_data$id))
total_rsvp <- sum(event_data$yes_rsvp_count)
valueBox(total_events, icon = "fa-calendar-alt", color = "orange")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
as.data.frame(table(df$local_date))
as.data.frame(table(event_data$local_date))
daily_count <- as.data.frame(table(event_data$local_date))
library(plotly)
View(daily_count)
plot1 <- daily_count %>%
plot_ly(x = ~Var1,
y = ~Freq,
color = "orange",
type = 'bar') %>%
layout(xaxis = list(title = "Date"), yaxis = list(title = "Number of Events",
range = c(0, max(daily_count_df$Freq))))
plot1 <- daily_count %>%
plot_ly(x = ~Var1,
y = ~Freq,
color = "orange",
type = 'bar') %>%
layout(xaxis = list(title = "Date"), yaxis = list(title = "Number of Events",
range = c(0, max(daily_count$Freq))))
plot1
table(df$venue_city)
table(event_data$venue_city)
loc_count <- as.data.frame(table(event_data$venue_city))
View(loc_count)
plot2 <- loc_count %>%
plot_ly(x = ~Freq,
y = ~Var1,
color = "red",
type = 'bar', orientation = 'h') %>%
layout(xaxis = list(title = "Number of Events"), yaxis = list(title = "Location of Events",
range = c(0, max(loc_count$Freq))))
plot2
View(loc_count)
loc_count$Var1[-1]
plot2 <- loc_count %>%
plot_ly(x = ~Freq[-1],
y = ~Var1[-1],
color = "red",
type = 'bar', orientation = 'h') %>%
layout(xaxis = list(title = "Number of Events"), yaxis = list(title = "Location of Events"))
plot2
table(event_data$venue_country)
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
View(loc_count)
View(event_data)
rmarkdown::render("R_Conf_Events.Rmd")
library(flexdashboard)
library(dplyr)
library(crosstalk)
library(DT)
library(leaflet)
library(plotly)
event_data <- readRDS("R_Events.rds")
event_data <- bind_rows(event_data, .id = "column_label")
sd <- SharedData$new(event_data)
total_events <- length(unique(event_data$id))
total_rsvp <- sum(event_data$yes_rsvp_count)
# table(event_data$venue_country)
filter_select(
id = "venue_city",
label = "City name",
sharedData = sd,
group = ~venue_city[-1]
)
library(tidyr)
temp_df <- event_data[!is.na(event_data$venue_city),]
View(temp_df)
filter_event_data <- event_data[!is.na(event_data$venue_city),]
sd <- SharedData$new(filter_event_data)
rmarkdown::render("R_Conf_Events.Rmd")
df <- as.data.frame(table(filter_event_data$local_date))
View(df)
df <- as.data.frame(table(filter_event_data$venue_city))
View(df)
table(filter_event_data$venue_city)
table(filter_event_data$venue_country)
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
View(filter_event_data)
View(filter_event_data)
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
sd$transform(as.data.frame)
rmarkdown::render("R_Conf_Events.Rmd")
datatable(filter_event_data, rownames = FALSE, extensions = 'Scroller',
options = list(scrollY = 200, scroller = TRUE, columnDefs = list(list(className = 'dt-left', targets = 0:3))))
datatable(filter_event_data[,-1], rownames = FALSE, extensions = 'Scroller',
options = list(scrollY = 200, scroller = TRUE, columnDefs = list(list(className = 'dt-left', targets = 0:3))))
rmarkdown::render("R_Conf_Events.Rmd")
View(daily_count)
wewewe <- event_data[complete.cases(event_data),]
View(event_data)
werrwe <- event_data[, -"resource"]
werrwe <- event_data[, -event_data$resource]
werrwe <- event_data[, 1:ncol(event_data)-1]
View(werrwe)
werrwe <- werrwe[complete.cases(werrwe),]
class(filter_event_data$venue_lat)
sd %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap) %>%
leaflet::addAwesomeMarkers(
popup = ~paste0(
"<h5>", filter_event_data$name, "</h5>",
"<table style='width:100%'>",
"<tr>",
"<th>ID</th>",
"<th>", filter_event_data$id, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>Date</th>",
"<th>", filter_event_data$local_date, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>RSVP Count</th>",
"<th>", filter_event_data$yes_rsvp_count, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>Location</th>",
"<th>", filter_event_data$venue_city, ", ", filter_event_data$venue_country, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>Coordinates</th>",
"<th>", filter_event_data$venue_lat, ", ", filter_event_data$venue_lon, "</th>",
"</tr>"
),  # end popup()
icon = awesomeIcons(
library = "ion",
icon = "ion-android-star-outline",
iconColor = "white",
markerColor = "red"
)
) %>%   # end addAwesomeMarkers()
leaflet::addMeasure()
df.20 <- quakes[1:20,]
sd %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles(providers$OpenStreetMap) %>%
leaflet::addAwesomeMarkers(
~filter_event_data$venue_lon, ~filter_event_data$venue_lat,
popup = ~paste0(
"<h5>", filter_event_data$name, "</h5>",
"<table style='width:100%'>",
"<tr>",
"<th>ID</th>",
"<th>", filter_event_data$id, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>Date</th>",
"<th>", filter_event_data$local_date, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>RSVP Count</th>",
"<th>", filter_event_data$yes_rsvp_count, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>Location</th>",
"<th>", filter_event_data$venue_city, ", ", filter_event_data$venue_country, "</th>",
"</tr>",
"<tr>",
"<tr>",
"<th>Coordinates</th>",
"<th>", filter_event_data$venue_lat, ", ", filter_event_data$venue_lon, "</th>",
"</tr>"
),  # end popup()
icon = awesomeIcons(
library = "ion",
icon = "ion-android-star-outline",
iconColor = "white",
markerColor = "red"
)
) %>%   # end addAwesomeMarkers()
leaflet::addMeasure()
rmarkdown::render("R_Conf_Events.Rmd")
rmarkdown::render("R_Conf_Events.Rmd")
